{"version":3,"sources":["components/Util.js","components/DataContext.js","components/GridNumberButton.js","components/GridArrowButton.js","components/GameGrid.js","components/Scoreboard.js","components/GameButton.js","App.jsx","reportWebVitals.js","index.js"],"names":["shuffle","array","randomIndex","currentIndex","length","Math","floor","random","scoreValuesStored","scoreWorth","DataContext","createContext","DataProvider","props","useState","Array","from","gridShown","setGridShown","guesses","currency","gameData","setGameData","gameScoring","setGameScoring","playerChoice","setPlayersChoice","grid","setGrid","scoreValues","setScoreValues","Provider","value","numberGrid","cellsDisplayed","playerInfo","Scoreboard","playerButtonChoice","scoreBoardValues","children","GridNumberButton","ClassText","Text","useContext","style","backgroundColor","className","onClick","cell","newArr","prev","cellClickHandler","GridArrowButtons","possibleMoves","transform","rotateAmount","size","GameGrid","useEffect","fill","map","input","i","GridArrowButton","cellText","score","index","prevArray","worth","color","Intl","NumberFormat","maximumSignificantDigits","format","GameButton","endOfRound","setEndOfRound","toggleGrid","bool","forEach","element","roundValue","find","o","sum","a","sumOfChoice","resetGrid","scoreValuesShuffled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.571b7e77.chunk.js","sourcesContent":["export function shuffle(array) {\r\n  let currentIndex = array.length,\r\n    randomIndex;\r\n  while (currentIndex !== 0) {\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n}\r\nexport const scoreValuesStored = [\r\n  6,\r\n  7,\r\n  8,\r\n  9,\r\n  10,\r\n  11,\r\n  12,\r\n  13,\r\n  14,\r\n  15,\r\n  16,\r\n  17,\r\n  18,\r\n  19,\r\n  20,\r\n  21,\r\n  22,\r\n  23,\r\n  24,\r\n];\r\n\r\nexport const scoreWorth = [\r\n  20000,\r\n  17000,\r\n  15000,\r\n  12000,\r\n  10000,\r\n  9000,\r\n  6000,\r\n  4000,\r\n  2000,\r\n  1000,\r\n  500,\r\n  1,\r\n  0,\r\n  -500,\r\n  -2000,\r\n  -4000,\r\n  -5000,\r\n  -7000,\r\n  -10000,\r\n];\r\n","import React, { useState, createContext } from \"react\";\r\nimport { shuffle, scoreValuesStored } from \"./Util\";\r\n\r\nexport const DataContext = createContext();\r\n\r\nexport const DataProvider = (props) => {\r\n  const [gridShown, setGridShown] = useState(\r\n    Array.from({ length: 9 }, () => false)\r\n  ); //what cells are being shown\r\n  const [gameData, setGameData] = useState({ guesses: 3, currency: 10000 });\r\n  const [gameScoring, setGameScoring] = useState([]); //scorebaord\r\n  const [playerChoice, setPlayersChoice] = useState([]);\r\n  const [grid, setGrid] = useState(shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]));\r\n  const [scoreValues, setScoreValues] = useState(scoreValuesStored);\r\n  return (\r\n    <DataContext.Provider\r\n      value={{\r\n        numberGrid: [grid, setGrid],\r\n        cellsDisplayed: [gridShown, setGridShown],\r\n        playerInfo: [gameData, setGameData],\r\n        Scoreboard: [gameScoring, setGameScoring],\r\n        playerButtonChoice: [playerChoice, setPlayersChoice],\r\n        scoreBoardValues: [scoreValues, setScoreValues],\r\n      }}\r\n    >\r\n      {props.children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\n\r\nconst GridNumberButton = ({ ClassText, Text }) => {\r\n  const { cellsDisplayed, playerInfo, playerButtonChoice } = useContext(\r\n    DataContext\r\n  );\r\n\r\n  const [gridShown, setGridShown] = cellsDisplayed;\r\n  const [gameData, setGameData] = playerInfo;\r\n  const [playerChoice, setPlayersChoice] = playerButtonChoice;\r\n\r\n  function cellClickHandler(cell) {\r\n    let newArr = [...gridShown];\r\n    if (gameData.guesses > 0 && !newArr[cell]) {\r\n      newArr[cell] = true;\r\n      setGridShown(newArr);\r\n      setGameData((prev) => ({ ...prev, guesses: gameData.guesses - 1 }));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          backgroundColor:\r\n            ClassText === playerChoice[0] ||\r\n            ClassText === playerChoice[1] ||\r\n            ClassText === playerChoice[2]\r\n              ? \"#2C8921\"\r\n              : \"#541764\",\r\n        }}\r\n        className={`button grid-number number${ClassText}`}\r\n        onClick={() => cellClickHandler(ClassText)}\r\n      >\r\n        <h1>{!gridShown[ClassText] ? \"\" : Text}</h1>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GridNumberButton;\r\n","import React, { useContext } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport { FiArrowUpCircle } from \"react-icons/fi\";\r\n\r\nconst GridArrowButtons = ({ ClassText }) => {\r\n  const { playerButtonChoice } = useContext(DataContext);\r\n\r\n  const [playerChoice, setPlayersChoice] = playerButtonChoice;\r\n  function rotateAmount(value) {\r\n    switch (value) {\r\n      case 0:\r\n        return 135;\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n        return 180;\r\n      case 4:\r\n        return 225;\r\n      case 5:\r\n      case 6:\r\n      case 7:\r\n        return 90;\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  const possibleMoves = [\r\n    [0, 4, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [2, 4, 6],\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n  ];\r\n  return (\r\n    <>\r\n      <div className={`button button${ClassText}`}>\r\n        <button\r\n          className=\"player-choice-button\"\r\n          style={{ transform: `rotate(${rotateAmount(ClassText)}deg)` }}\r\n          onClick={() => {\r\n            setPlayersChoice(possibleMoves[ClassText]);\r\n          }}\r\n        >\r\n          <FiArrowUpCircle size=\"45px\" />\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GridArrowButtons;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport GridNumberButton from \"./GridNumberButton\";\r\nimport GridArrowButton from \"./GridArrowButton\";\r\nimport { DataContext } from \"./DataContext\";\r\n\r\nconst GameGrid = () => {\r\n  const { cellsDisplayed, numberGrid } = useContext(DataContext);\r\n\r\n  const [gridShown, setGridShown] = cellsDisplayed;\r\n  const [grid, setGrid] = numberGrid;\r\n\r\n  useEffect(() => {\r\n    let newArr = [...gridShown];\r\n    newArr[Math.floor(Math.random() * 9)] = true;\r\n    setGridShown(newArr);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"parent\">\r\n        {Array(8)\r\n          .fill(1)\r\n          .map((input, i) => (\r\n            <GridArrowButton ClassText={i} />\r\n          ))}\r\n        {grid.map((cellText, i) => (\r\n          <GridNumberButton ClassText={i} Text={cellText} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameGrid;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport { shuffle, scoreWorth } from \"./Util\";\r\n\r\nconst Scoreboard = () => {\r\n  const { Scoreboard, playerInfo, scoreBoardValues } = useContext(DataContext);\r\n  const [gameScoring, setGameScoring] = Scoreboard;\r\n  const [gameData, setGameData] = playerInfo;\r\n  const [scoreValues, setScoreValues] = scoreBoardValues;\r\n\r\n  useEffect(() => {\r\n    setGameScoring([]);\r\n    shuffle(scoreValues).map((score, index) => {\r\n      setGameScoring((prevArray) => [\r\n        ...prevArray,\r\n        { value: score, worth: scoreWorth[index] },\r\n      ]);\r\n    });\r\n  }, [scoreValues]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"right-side-upper\">\r\n        <h1>Payout</h1>\r\n        <div className=\"payout-container\">\r\n          {gameScoring.map((score, index) => {\r\n            return (\r\n              <div className=\"score\">\r\n                <p className=\"value\">{score.value}:</p>\r\n                <p\r\n                  className=\"worth\"\r\n                  style={{ color: score.worth < 0 ? \"red\" : \"#41AF1E\" }}\r\n                >\r\n                  {` £${new Intl.NumberFormat(\"en-EU\", {\r\n                    maximumSignificantDigits: 3,\r\n                  }).format(score.worth)}`}\r\n                </p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"player-currency\">\r\n        <h3>Your Currency:</h3>\r\n        <h1>\r\n          {` £${new Intl.NumberFormat(\"en-EU\", {\r\n            maximumSignificantDigits: 3,\r\n          }).format(gameData.currency)}`}\r\n        </h1>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Scoreboard;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport { shuffle, scoreValuesStored } from \"./Util\";\r\n\r\nconst GameButton = () => {\r\n  const {\r\n    playerInfo,\r\n    playerButtonChoice,\r\n    numberGrid,\r\n    Scoreboard,\r\n    cellsDisplayed,\r\n    scoreBoardValues,\r\n  } = useContext(DataContext);\r\n\r\n  const [gameData, setGameData] = playerInfo;\r\n  const [playerChoice, setPlayersChoice] = playerButtonChoice;\r\n  const [grid, setGrid] = numberGrid;\r\n  const [gameScoring, setGameScoring] = Scoreboard;\r\n  const [gridShown, setGridShown] = cellsDisplayed;\r\n  const [scoreValues, setScoreValues] = scoreBoardValues;\r\n\r\n  const [endOfRound, setEndOfRound] = useState(false);\r\n  function playersTurn() {\r\n    toggleGrid(true);\r\n    setEndOfRound(true);\r\n    let roundValue = gameScoring.find((o) => o.value === sumOfChoice());\r\n    setGameData((prev) => ({\r\n      ...prev,\r\n      currency: gameData.currency + roundValue.worth,\r\n    }));\r\n  }\r\n  function toggleGrid(bool) {\r\n    gridShown.forEach((element, index) => {\r\n      gridShown[index] = bool;\r\n    });\r\n  }\r\n  function sumOfChoice() {\r\n    let sum = 0;\r\n    playerChoice.map((a) => {\r\n      sum += grid[a];\r\n    });\r\n    return sum;\r\n  }\r\n\r\n  function resetGrid() {\r\n    toggleGrid(false);\r\n    let newArr = [...gridShown];\r\n    newArr[Math.floor(Math.random() * 9)] = true;\r\n    setGridShown(newArr);\r\n  }\r\n  function nextRoundHandler() {\r\n    setEndOfRound(false);\r\n    setGrid(shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]));\r\n    setPlayersChoice([]);\r\n    resetGrid();\r\n    setGameData((prev) => ({\r\n      ...prev,\r\n      guesses: (gameData.guesses = 3),\r\n    }));\r\n    let scoreValuesShuffled = [...scoreValuesStored];\r\n    setScoreValues(shuffle(scoreValuesShuffled));\r\n  }\r\n  return (\r\n    <div className=\"left-side-lower\">\r\n      <h3>{` Remaining Guesses: ${gameData.guesses}`}</h3>\r\n      {playerChoice.length > 0 && !endOfRound && (\r\n        <button onClick={playersTurn}>Confirm</button>\r\n      )}\r\n      {endOfRound && <button onClick={nextRoundHandler}>Next Round</button>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameButton;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GameGrid from \"./components/GameGrid\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport GameButton from \"./components/GameButton\";\nimport { DataProvider } from \"./components/DataContext\";\n\nfunction App() {\n  return (\n    <>\n      <DataProvider>\n        <div className=\"game-container\">\n          <div className=\"left-side-container\">\n            <GameGrid />\n            <GameButton />\n          </div>\n          <div className=\"right-side-container\">\n            <Scoreboard />\n          </div>\n        </div>\n      </DataProvider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}